// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include <vector>
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;

namespace generated
{
    // This class is used in:
    class CPACSRoot : public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSRoot(CTiglUIDManager* uidMgr);
        TIGL_EXPORT virtual ~CPACSRoot();

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<std::string>& GetSingleUidRef() const;
        TIGL_EXPORT virtual void SetSingleUidRef(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const std::vector<std::string>& GetMultiUidRefs() const;
        TIGL_EXPORT virtual void AddToMultiUidRefs(const std::string& value);
        TIGL_EXPORT virtual bool RemoveFromMultiUidRefs(const std::string& value);

    protected:
        CTiglUIDManager* m_uidMgr;

        boost::optional<std::string> m_singleUidRef;
        std::vector<std::string>     m_multiUidRefs;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSRoot(const CPACSRoot&) = delete;
        CPACSRoot& operator=(const CPACSRoot&) = delete;

        CPACSRoot(CPACSRoot&&) = delete;
        CPACSRoot& operator=(CPACSRoot&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSRoot = generated::CPACSRoot;
} // namespace tigl
// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSRoot.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSRoot::CPACSRoot(CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
    }

    CPACSRoot::~CPACSRoot()
    {
        if (m_uidMgr) {
            if (m_singleUidRef && !m_singleUidRef->empty()) m_uidMgr->TryUnregisterReference(*m_singleUidRef, *this);
            for (std::vector<std::string>::iterator it = m_multiUidRefs.begin(); it != m_multiUidRefs.end(); ++it) {
                if (!it->empty()) m_uidMgr->TryUnregisterReference(*it, *this);
            }
        }
    }

    const CTiglUIDObject* CPACSRoot::GetNextUIDParent() const
    {
        return nullptr;
    }

    CTiglUIDObject* CPACSRoot::GetNextUIDParent()
    {
        return nullptr;
    }

    CTiglUIDManager& CPACSRoot::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSRoot::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSRoot::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element singleUidRef
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/singleUidRef")) {
            m_singleUidRef = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/singleUidRef");
            if (m_singleUidRef->empty()) {
                LOG(WARNING) << "Optional element singleUidRef is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_singleUidRef->empty()) m_uidMgr->RegisterReference(*m_singleUidRef, *this);
        }

        // read element multiUidRefs
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/multiUidRefs")) {
            tixi::TixiReadElements(tixiHandle, xpath + "/multiUidRefs", m_multiUidRefs, 0, tixi::xsdUnbounded);
            if (m_uidMgr) {
                for (std::vector<std::string>::iterator it = m_multiUidRefs.begin(); it != m_multiUidRefs.end(); ++it) {
                    if (!it->empty()) m_uidMgr->RegisterReference(*it, *this);
                }
            }
        }

    }

    void CPACSRoot::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "singleUidRef", "multiUidRefs" };

        // write element singleUidRef
        if (m_singleUidRef) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/singleUidRef", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/singleUidRef", *m_singleUidRef);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/singleUidRef")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/singleUidRef");
            }
        }

        // write element multiUidRefs
        tixi::TixiSaveElements(tixiHandle, xpath + "/multiUidRefs", m_multiUidRefs);

    }

    const boost::optional<std::string>& CPACSRoot::GetSingleUidRef() const
    {
        return m_singleUidRef;
    }

    void CPACSRoot::SetSingleUidRef(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_singleUidRef && !m_singleUidRef->empty()) m_uidMgr->TryUnregisterReference(*m_singleUidRef, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_singleUidRef = value;
    }

    const std::vector<std::string>& CPACSRoot::GetMultiUidRefs() const
    {
        return m_multiUidRefs;
    }

    void CPACSRoot::AddToMultiUidRefs(const std::string& value)
    {
        if (m_uidMgr) {
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_multiUidRefs.push_back(value);
    }

    bool CPACSRoot::RemoveFromMultiUidRefs(const std::string& value)
    {
        const auto it = std::find(m_multiUidRefs.begin(), m_multiUidRefs.end(), value);
        if (it != m_multiUidRefs.end()) {
            if (m_uidMgr && !it->empty()) {
                m_uidMgr->TryUnregisterReference(*it, *this);
            }
            m_multiUidRefs.erase(it);
            return true;
        }
        return false;
    }

    const CTiglUIDObject* CPACSRoot::GetNextUIDObject() const
    {
        return GetNextUIDParent();
    }

    void CPACSRoot::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_singleUidRef && *m_singleUidRef == oldUid) {
            m_singleUidRef = newUid;
        }
        for (auto& entry : m_multiUidRefs) {
            if (entry == oldUid) {
                entry = newUid;
            }
        }
    }

} // namespace generated
} // namespace tigl
