// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include "tigl_internal.h"

namespace tigl
{
namespace generated
{
    // This class is used in:
    // generated from /xsd:schema/xsd:complexType[1]
    
    /// <summary>
    /// <para>
    /// Summary
    /// </para>
    /// </summary>
    /// <remarks>
    /// <para>
    /// Remarks1
    /// </para>
    /// <para>
    /// Remarks2
    /// </para>
    /// <para>
    /// Remarks3
    /// </para>
    /// </remarks>
    /// <mediaLink>
    /// <image href="http://link.com">
    /// </image>
    /// </mediaLink>
    class CPACSRoot
    {
    public:
        TIGL_EXPORT CPACSRoot();
        TIGL_EXPORT virtual ~CPACSRoot();

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const int& GetA() const;
        TIGL_EXPORT virtual void SetA(const int& value);

        TIGL_EXPORT virtual const int& GetB() const;
        TIGL_EXPORT virtual void SetB(const int& value);

    protected:
        int m_a;
        int m_b;

    private:
#ifdef HAVE_CPP11
        CPACSRoot(const CPACSRoot&) = delete;
        CPACSRoot& operator=(const CPACSRoot&) = delete;

        CPACSRoot(CPACSRoot&&) = delete;
        CPACSRoot& operator=(CPACSRoot&&) = delete;
#else
        CPACSRoot(const CPACSRoot&);
        CPACSRoot& operator=(const CPACSRoot&);
#endif
    };
} // namespace generated

// Aliases in tigl namespace
#ifdef HAVE_CPP11
using CCPACSRoot = generated::CPACSRoot;
#else
typedef generated::CPACSRoot CCPACSRoot;
#endif
} // namespace tigl
// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSRoot.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSRoot::CPACSRoot()
        : m_a(0)
        , m_b(0)
    {
    }

    CPACSRoot::~CPACSRoot()
    {
    }

    void CPACSRoot::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element a
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/a")) {
            m_a = tixi::TixiGetElement<int>(tixiHandle, xpath + "/a");
        }
        else {
            LOG(ERROR) << "Required element a is missing at xpath " << xpath;
        }

        // read element b
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/b")) {
            m_b = tixi::TixiGetElement<int>(tixiHandle, xpath + "/b");
        }
        else {
            LOG(ERROR) << "Required element b is missing at xpath " << xpath;
        }

    }

    void CPACSRoot::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element a
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/a");
        tixi::TixiSaveElement(tixiHandle, xpath + "/a", m_a);

        // write element b
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/b");
        tixi::TixiSaveElement(tixiHandle, xpath + "/b", m_b);

    }

    const int& CPACSRoot::GetA() const
    {
        return m_a;
    }

    void CPACSRoot::SetA(const int& value)
    {
        m_a = value;
    }

    const int& CPACSRoot::GetB() const
    {
        return m_b;
    }

    void CPACSRoot::SetB(const int& value)
    {
        m_b = value;
    }

} // namespace generated
} // namespace tigl
